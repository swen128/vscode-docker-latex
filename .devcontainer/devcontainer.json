// If you want to run as a non-root user in the container, see .devcontainer/docker-compose.yml.
{
	"name": "LaTeX",
	"dockerComposeFile": [
		"docker-compose.yml"
	],
	// The 'service' property is the name of the service for the container that VS Code should
	// use. Update this value and .devcontainer/docker-compose.yml to the real service name.
	"service": "latex",
	// The optional 'workspaceFolder' property is the path VS Code should open by default when
	// connected. This is typically a file mount in .devcontainer/docker-compose.yml
	"workspaceFolder": "/workspace",
	// Use 'settings' to set *default* container specific settings.json values on container create. 
	// You can edit these settings after create using File > Preferences > Settings > Remote.
	"settings": {
		// This will ignore your local shell user setting for Linux since shells like zsh are typically 
		// not in base container images. You can also update this to an specific shell to ensure VS Code 
		// uses the right one for terminals and tasks. For example, /bin/bash (or /bin/ash for Alpine).
		"terminal.integrated.shell.linux": null,
		// Settings for the extension 'LaTeX Workshop'
		"latex-workshop.latex.recipes": [
			{
				"name": "latexmk",
				"tools": [
					"latexmk",
					"cleanup"
				]
			}
		],
		"latex-workshop.latex.tools": [
			{
				"name": "latexmk",
				"command": "latexmk",
				"args": [
					"-gg",
					"-outdir=%OUTDIR%",
					"%DOC%"
				],
				"env": {}
			},
			{
				"name": "cleanup",
				"command": "latexmk",
				"args": [
					"-c",
					"-outdir=%OUTDIR%",
					"%DOC%"
				],
				"env": {}
			}
		],
		"latex-workshop.latex.outDir": "/workspace/build",
		"latex-workshop.synctex.afterBuild.enabled": true,
		"latex-workshop.view.pdf.viewer": "tab"
	},
	// Uncomment the next line if you want start specific services in your Docker Compose config.
	// "runServices": [],
	// Uncomment the next line if you want to keep your containers running after VS Code shuts down.
	// "shutdownAction": "none",
	// Uncomment the next line to run commands after the container is created - for example installing git.
	// "postCreateCommand": "apt-get update && apt-get install -y git",
	// Add the IDs of extensions you want installed when the container is created in the array below.
	"extensions": [
		"james-yu.latex-workshop"
	]
}